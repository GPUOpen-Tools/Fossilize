cmake_minimum_required(VERSION 3.5)
set(CMAKE_CXX_STANDARD 11)
set(CMAKE_C_STANDARD 99)
project(RGALayer LANGUAGES CXX C)

if (CMAKE_COMPILER_IS_GNUCXX OR (${CMAKE_CXX_COMPILER_ID} MATCHES "Clang"))
	set(FOSSILIZE_CXX_FLAGS -Wall -Wextra -Wno-missing-field-initializers -Wno-empty-body)
elseif (MSVC)
	set(FOSSILIZE_CXX_FLAGS /D_CRT_SECURE_NO_WARNINGS /D_SCL_SECURE_NO_WARNINGS /wd4267 /wd4244 /wd4309 /wd4005 /MP /DNOMINMAX)
endif()

option(FOSSILIZE_SANITIZE_ADDRESS "Sanitize address" OFF)
set(FOSSILIZE_LINK_FLAGS)
if (FOSSILIZE_SANITIZE_ADDRESS)
	set(FOSSILIZE_CXX_FLAGS ${FOSSILIZE_CXX_FLAGS} -fsanitize=address)
	set(FOSSILIZE_LINK_FLAGS ${FOSSILIZE_LINK_FLAGS} -fsanitize=address)
endif()

option(FOSSILIZE_SANITIZE_THREADS "Sanitize threads" OFF)
if (FOSSILIZE_SANITIZE_THREADS)
	set(FOSSILIZE_CXX_FLAGS ${FOSSILIZE_CXX_FLAGS} -fsanitize=thread)
	set(FOSSILIZE_LINK_FLAGS ${FOSSILIZE_LINK_FLAGS} -fsanitize=thread)
endif()

# RGA source files.
file(GLOB  RGA_SOURCE_FILES
    "${PROJECT_SOURCE_DIR}/rga/Vulkan/Src/*.cpp"
   "${PROJECT_SOURCE_DIR}/rga/Vulkan/Src/Converters/*.cpp"
)

# RGA include files.
file(GLOB  RGA_INCLUDES
    "${PROJECT_SOURCE_DIR}/rga/Vulkan/Include/*.h"
    "${PROJECT_SOURCE_DIR}/rga/Vulkan/Include/Converters/*.h"
)

add_library(fossilize STATIC fossilize.hpp fossilize.cpp varint.cpp varint.hpp ${RGA_SOURCE_FILES})
target_include_directories(fossilize PUBLIC ${CMAKE_CURRENT_SOURCE_DIR} ${RGA_INCLUDES})
target_compile_options(fossilize PUBLIC ${FOSSILIZE_CXX_FLAGS})

option(FOSSILIZE_VULKAN_LAYER "Build Vulkan layer." ON)
if (FOSSILIZE_VULKAN_LAYER)
	set_target_properties(fossilize PROPERTIES POSITION_INDEPENDENT_CODE ON)
endif()

option(FOSSILIZE_RAPIDJSON_INCLUDE_PATH "Optional custom include path for rapidjson.")
if (FOSSILIZE_RAPIDJSON_INCLUDE_PATH)
	target_include_directories(fossilize PUBLIC ${FOSSILIZE_RAPIDJSON_INCLUDE_PATH})
else()
	target_include_directories(fossilize PUBLIC ${CMAKE_CURRENT_SOURCE_DIR}/rapidjson/include)
endif()

option(FOSSILIZE_VULKAN_INCLUDE_PATH "Optional custom include path for Vulkan headers.")
if (FOSSILIZE_VULKAN_INCLUDE_PATH)
	target_include_directories(fossilize PUBLIC ${FOSSILIZE_VULKAN_INCLUDE_PATH})
else()
	target_include_directories(fossilize PUBLIC ${CMAKE_CURRENT_SOURCE_DIR}/khronos/vulkan)
endif()

if (FOSSILIZE_VULKAN_LAYER)
	add_subdirectory(layer)
endif()

option(FOSSILIZE_CLI "Disable Fossilize CLI support." OFF)
if (FOSSILIZE_CLI)
    add_subdirectory(cli)
endif()

option(FOSSILIZE_TESTS "Enable Fossilize tests." ON)
if (FOSSILIZE_TESTS)
	enable_testing()
	add_subdirectory(test)
endif()

